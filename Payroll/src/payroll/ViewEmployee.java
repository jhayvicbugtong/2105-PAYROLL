package payroll;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.table.DefaultTableModel;

import javax.swing.JOptionPane;
import payroll.AdminDashboard;



public class ViewEmployee extends javax.swing.JFrame {
    
    public void loadEmployeeDataToTable() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        // SQL query to join employees and positions tables
        String query = "SELECT e.employee_id, e.name, p.position_name, e.contact_number, e.address, e.day_off, e.date_hired " +
                       "FROM employees e " +
                       "JOIN positions p ON e.position_id = p.position_id";

        try {
            // Set up database connection
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/payroll_db", "root", "");
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);

            // Create a DefaultTableModel to hold the data for the JTable
            DefaultTableModel model = (DefaultTableModel) EmployeeInfoTable.getModel();

            // Clear any existing rows
            model.setRowCount(0);

            // Add each row from the ResultSet to the table
            while (rs.next()) {
                Object[] row = new Object[7]; // Adjust the array size to match the number of columns

                row[0] = rs.getInt("employee_id");  // Employee ID
                row[1] = rs.getString("name");       // Name
                row[2] = rs.getString("position_name"); // Position Name from positions table
                row[3] = rs.getString("contact_number"); // Contact Number
                row[4] = rs.getString("address");    // Address
                row[5] = rs.getString("day_off");    // Day Off
                row[6] = rs.getDate("date_hired");   // Date Hired

                model.addRow(row);  // Add the row to the table model
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public ViewEmployee() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EmployeeInfoTable = new javax.swing.JTable();
        Name = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtContactnumber = new javax.swing.JTextField();
        deleteEmployeeButton = new javax.swing.JButton();
        addEmployeeButton = new javax.swing.JButton();
        backTodashboard = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        address = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtPosition = new javax.swing.JTextField();
        address1 = new javax.swing.JLabel();
        txtDayOff = new javax.swing.JTextField();
        address2 = new javax.swing.JLabel();
        txtDateHired = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(107, 36, 12));

        EmployeeInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Position", "Contact No. ", "Address", "Day Off", "Date Hired"
            }
        ));
        EmployeeInfoTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        EmployeeInfoTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        EmployeeInfoTable.setShowGrid(true);
        jScrollPane1.setViewportView(EmployeeInfoTable);
        if (EmployeeInfoTable.getColumnModel().getColumnCount() > 0) {
            EmployeeInfoTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            EmployeeInfoTable.getColumnModel().getColumn(1).setPreferredWidth(185);
            EmployeeInfoTable.getColumnModel().getColumn(2).setPreferredWidth(160);
            EmployeeInfoTable.getColumnModel().getColumn(3).setPreferredWidth(120);
            EmployeeInfoTable.getColumnModel().getColumn(4).setPreferredWidth(250);
            EmployeeInfoTable.getColumnModel().getColumn(6).setPreferredWidth(70);
        }

        Name.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Name.setForeground(new java.awt.Color(245, 204, 160));
        Name.setText("NAME");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(245, 204, 160));
        jLabel3.setText("CONTACT NO.");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(245, 204, 160));
        jLabel4.setText("POSITION");

        txtContactnumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactnumberActionPerformed(evt);
            }
        });

        deleteEmployeeButton.setBackground(new java.awt.Color(228, 143, 69));
        deleteEmployeeButton.setForeground(new java.awt.Color(107, 36, 12));
        deleteEmployeeButton.setText("Delete Employee");
        deleteEmployeeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeButtonActionPerformed(evt);
            }
        });

        addEmployeeButton.setBackground(new java.awt.Color(228, 143, 69));
        addEmployeeButton.setForeground(new java.awt.Color(107, 36, 12));
        addEmployeeButton.setText("Add Employee");
        addEmployeeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeButtonActionPerformed(evt);
            }
        });

        backTodashboard.setBackground(new java.awt.Color(228, 143, 69));
        backTodashboard.setForeground(new java.awt.Color(107, 36, 12));
        backTodashboard.setText("Back to Dashboard");
        backTodashboard.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backTodashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backTodashboardActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(228, 143, 69));
        jButton4.setForeground(new java.awt.Color(107, 36, 12));
        jButton4.setText("Edit Information");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        address.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        address.setForeground(new java.awt.Color(245, 204, 160));
        address.setText("ADDRESS");

        txtPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPositionActionPerformed(evt);
            }
        });

        address1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        address1.setForeground(new java.awt.Color(245, 204, 160));
        address1.setText("DAY OFF");

        address2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        address2.setForeground(new java.awt.Color(245, 204, 160));
        address2.setText("DATE HIRED");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(Name)
                    .addComponent(jLabel4)
                    .addComponent(address)
                    .addComponent(address1)
                    .addComponent(address2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUsername)
                    .addComponent(txtContactnumber)
                    .addComponent(txtAddress)
                    .addComponent(txtPosition, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(txtDayOff)
                    .addComponent(txtDateHired))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addEmployeeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteEmployeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(backTodashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addEmployeeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteEmployeeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Name))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtContactnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(address)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDayOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(address1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDateHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(address2)
                    .addComponent(backTodashboard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
// Method to refresh the table with updated data
    private void refreshEmployeeTable() {
    String url = "jdbc:mysql://localhost:3306/payroll_db";
    String user = "root";
    String pass = "";

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");

        conn = DriverManager.getConnection(url, user, pass);

        // SQL query to fetch employee details along with the position name
        String sql = "SELECT e.employee_id, e.name, p.position_name, e.contact_number, e.address, e.day_off, e.date_hired " +
                     "FROM employees e " +
                     "JOIN positions p ON e.position_id = p.position_id";

        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();

        // Assuming your table model is DefaultTableModel
        DefaultTableModel model = (DefaultTableModel) EmployeeInfoTable.getModel();
        model.setRowCount(0); // Clear existing data

        // Add rows to the table model
        while (rs.next()) {
            Object[] row = {
                rs.getInt("employee_id"),
                rs.getString("name"),
                rs.getString("position_name"), // Fetching position name from the positions table
                rs.getString("contact_number"),
                rs.getString("address"),
                rs.getString("day_off"),
                rs.getDate("date_hired") // Display the date hired
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Driver not found: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }
    
    private void addEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeButtonActionPerformed
    String name = txtUsername.getText();
    String contactNumber = txtContactnumber.getText();
    String address = txtAddress.getText();
    String positionName = txtPosition.getText(); // Get position name
    String dayOff = txtDayOff.getText(); // Get day off
    String dateHired = txtDateHired.getText(); // Get date hired

    String url = "jdbc:mysql://localhost:3306/payroll_db";
    String user = "root";
    String pass = "";

    // Validate input
    if (name.isEmpty() || positionName.isEmpty() || contactNumber.isEmpty() || address.isEmpty() || dayOff.isEmpty() || dateHired.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields must be filled out.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(url, user, pass);

        // Step 1: Retrieve position_id based on position_name
        String getPositionIdSql = "SELECT position_id FROM positions WHERE position_name = ?";
        pst = conn.prepareStatement(getPositionIdSql);
        pst.setString(1, positionName);
        rs = pst.executeQuery();

        int positionId = -1;
        if (rs.next()) {
            positionId = rs.getInt("position_id");
        } else {
            JOptionPane.showMessageDialog(this, "Invalid position name. Please check the positions.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        pst.close(); // Close previous PreparedStatement

        // Step 2: Insert the new employee with day_off and date_hired
        String insertEmployeeSql = "INSERT INTO employees (name, position_id, contact_number, address, day_off, date_hired) VALUES (?, ?, ?, ?, ?, ?)";
        pst = conn.prepareStatement(insertEmployeeSql);
        pst.setString(1, name);
        pst.setInt(2, positionId);
        pst.setString(3, contactNumber);
        pst.setString(4, address);
        pst.setString(5, dayOff); // Insert the day off as a string (e.g., 'Monday')
        pst.setDate(6, java.sql.Date.valueOf(dateHired)); // Convert date string to SQL date

        int rowsInserted = pst.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Employee added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear input fields
            txtUsername.setText("");
            txtPosition.setText("");
            txtContactnumber.setText("");
            txtAddress.setText("");
            txtDayOff.setText("");
            txtDateHired.setText("");

            // Refresh the employee table
            refreshEmployeeTable();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add employee.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Driver not found: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    

        
    }//GEN-LAST:event_addEmployeeButtonActionPerformed
    
    }

    private void deleteEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeButtonActionPerformed
    // Get the selected row from the table
int selectedRow = EmployeeInfoTable.getSelectedRow();

if (selectedRow == -1) {
    // No row is selected, show an error message
    JOptionPane.showMessageDialog(this, "Please select an employee to delete.", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// Get the employee ID from the selected row (assuming the ID is in the first column)
int employeeId = (int) EmployeeInfoTable.getValueAt(selectedRow, 0); // Assuming the ID is in the first column

// Ask for confirmation before deleting
int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this employee?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

if (confirmation == JOptionPane.YES_OPTION) {
    String url = "jdbc:mysql://localhost:3306/payroll_db";
    String user = "root";
    String pass = "";

    Connection conn = null;
    PreparedStatement pst = null;

    try {
        // Connect to the database
        conn = DriverManager.getConnection(url, user, pass);

        // Step 1: Delete from employee_deductions
        String deleteEmployeeDeductionsSql = "DELETE FROM employee_deductions WHERE employee_id = ?";
        pst = conn.prepareStatement(deleteEmployeeDeductionsSql);
        pst.setInt(1, employeeId);
        pst.executeUpdate();
        pst.close();

        // Step 2: Delete from timesheet
        String deleteTimesheetSql = "DELETE FROM timesheet WHERE employee_id = ?";
        pst = conn.prepareStatement(deleteTimesheetSql);
        pst.setInt(1, employeeId);
        pst.executeUpdate();
        pst.close();

        // Step 3: Delete from employees
        String deleteEmployeeSql = "DELETE FROM employees WHERE employee_id = ?";
        pst = conn.prepareStatement(deleteEmployeeSql);
        pst.setInt(1, employeeId);

        // Execute the DELETE query
        int rowsDeleted = pst.executeUpdate();

        if (rowsDeleted > 0) {
            // Successfully deleted
            JOptionPane.showMessageDialog(this, "Employee deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh the table to reflect the changes
            refreshEmployeeTable();
        } else {
            // No employee found with the specified ID
            JOptionPane.showMessageDialog(this, "Failed to delete employee. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (pst != null) pst.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
    }//GEN-LAST:event_deleteEmployeeButtonActionPerformed

    private void backTodashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backTodashboardActionPerformed
         this.setVisible(false);
     AdminDashboard back = new AdminDashboard();
     back.setVisible(true);
    }//GEN-LAST:event_backTodashboardActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtContactnumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactnumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactnumberActionPerformed

    private void txtPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPositionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewEmployee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable EmployeeInfoTable;
    private javax.swing.JLabel Name;
    private javax.swing.JButton addEmployeeButton;
    private javax.swing.JLabel address;
    private javax.swing.JLabel address1;
    private javax.swing.JLabel address2;
    private javax.swing.JButton backTodashboard;
    private javax.swing.JButton deleteEmployeeButton;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtContactnumber;
    private javax.swing.JTextField txtDateHired;
    private javax.swing.JTextField txtDayOff;
    private javax.swing.JTextField txtPosition;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    
}
